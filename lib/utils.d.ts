import { Fp, Fp2, Fp12, Point } from "./fields";
export declare type Bytes = Uint8Array | string;
export declare type Hash = Bytes;
export declare const CURVE: {
    P: bigint;
    n: bigint;
    DOMAIN_LENGTH: number;
    Gx: bigint;
    Gy: bigint;
    G2x: bigint[];
    G2y: bigint[];
    G2_COFACTOR: bigint;
};
export declare const P: bigint;
export declare const DOMAIN_LENGTH = 8;
export declare const P_ORDER_X_12_DIVIDED: bigint;
export declare const B: Fp;
export declare const B2: Fp2;
export declare const B12: Fp12;
export declare const Z1: Point<bigint>;
export declare const Z2: Point<import("./fields").BigintTuple>;
export declare function toBytesBE(num: bigint | number | string, padding?: number): Uint8Array;
export declare function toBigInt(num: string | Uint8Array | bigint | number): bigint;
export declare function getXCoordinate(hash: Hash, domain: Bytes): Promise<Fp2>;
export declare function publicKeyFromG1(point: Point<bigint>): Uint8Array;
export declare function publicKeyToG1(publicKey: Bytes): Point<bigint>;
export declare function signatureFromG2(point: Point<[bigint, bigint]>): Uint8Array;
export declare function signatureToG2(signature: Bytes): Point<import("./fields").BigintTuple>;
export declare function hashToG2(hash: Hash, domain: Bytes): Promise<Point<import("./fields").BigintTuple>>;
